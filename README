        Xilinx ZYNQMP Boards


1. About this document
======================
This document provides common and non-hardware specific information.
Please refer to README.hardware for hardware specific information.

Dependencies
------------
This layer depends on the oe-core version supplied with Wind River Linux
and the wr-kernel layer.


Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.


Building the zynqmp layer
-----------------------------
This layer and wr-kernel layer should be added to bblayers.conf.


License
-------
Copyright (C) 2016 Wind River Systems, Inc.

The right to copy, distribute or otherwise make use of this software may
be licensed only pursuant to the terms of an applicable Wind River license
agreement. No license to Wind River intellectual properly rights is granted
herein. All rights not licensed by Wind River are reserved by Wind River.

Source code included in tree for individual recipes is under the LICENSE
stated in each recipe (.bb file) unless other stated.


2. BSP Kernel and Image Combination
====================================

WindRiver Linux kernel and image compatibility for this BSP is described
in the following table.
The leftmost column indicates the kernel type, and the top row indicates
the image type.
A 'Y' in any content cell indicates that the combination is supported; 'N'
indicates that it is not supported:

--------------------------------------------------------------------
| kernel/image  | glibc-std | glibc-small | glibc-cgl | glibc-tiny |
--------------------------------------------------------------------
|   standard    |     Y     |      Y      |     N     |     N      |
--------------------------------------------------------------------
|   preempt_rt  |     Y     |      Y      |     N     |     N      |
--------------------------------------------------------------------

Note: With regard to the kernel and image type, please refer to WindRiver Linux
specification for details.


3. Board Specific Patches
=========================

To get a list of patches applied to the kernel for this BSP,
along with patch descriptions, use 'git whatchanged' on the default
kernel (git whatchanged <kernel_type>..<bsp_name>). For example:

	# cd path_to_project/bitbake_build/tmp/work-shared/xilinx-zynqmp/kernel-source
	# git whatchanged standard/base..HEAD


4. Boot Instructions
====================

You must load the DTB (device tree blob) into the target's memory
prior to booting the kernel Image. The DTB file can be found in the export
directory after building a project, or you can generate it manually with the
following commands:

        # bitbake -c devshell virtual/kernel
        # make zynqmp-<Board Name>.dtb

You can create and edit your own DTS using a command similar to:

        # vim arch/arm64/boot/dts/xilinx/the_file_you_edit*.dts
	# make xilinx/zynqmp-zcu102-rev1.0.dtb

The resulting DTB file can be found here:
path_to_project/build/linux-windriver/linux-<board>-<kernel type>-build/arch/arm64/boot/dts/xilinx/

Assuming all files can be downloaded from a network, deploy your board and host
properly to ensure your network is available from the board.

4.1 MTD Root File System (NOR and NAND Flash)
---------------------------------------------

The NOR device on the xilinx-zynqmp board is a 128M Byte NOR flash.
The default layout of the NOR device is:

    0x000000000000-0x000000100000 : "qspi-fsbl-uboot"
    0x000000100000-0x000000600000 : "qspi-linux"
    0x000000600000-0x000000620000 : "qspi-device-tree"
    0x000000620000-0x000000c00000 : "qspi-rootfs"

4.1.1 Generate the boot image:
------------------------------

Configure your project with the following options in your local.conf file
to generate the jffs2 boot image and enable the necessary kernel options:

        LINUX_KERNEL_TYPE="standard"
        IMAGE_FSTYPES="jffs2"

Start menuconfig and enable flash filesystem support:
        # bitbake -c menuconfig linux-windriver
You will find flash under the Filesystems section of menuconfig.


The kernel image and jffs2 image can be found in the export directory.

Program the image into flash with the following command:

	# flash_eraseall /dev/mtdx
	# flashcp -v wrlinux-image-glibc-small-xilinx-zynqmp.jffs2 /dev/mtdx
	# mkdir /mnt/jffs2
	# mount -t jffs2 /dev/mtdblockx	/mnt/jffs2
	# umount /mnt/jffs2

NOTE: Before writing to the flash memory, you need to know its layout. You can
get this information by running 'cat /proc/mtd' on your target.

4.1.2 Deployment
----------------

After loading the kernel, pass kernel arguments as shown:

	root=/dev/mtdblockx rw rootfstype=jffs2 console=ttyPS0,115200 earlycon=cdns,mmio,0xFF000000,115200n8

4.2 Boot from SD card
---------------------

4.2.1 Deploy kernel, DTB image and file system image into your SD card
-----------------------------------------------------------

Refer to the bootloader/README for information on how to make an SD
bootable card. Deploy the kernel image, DTB image and file system image as follows:

	# mount /dev/mmcblk0p2 /mnt/sd
	# tar xfj wrlinux-image-glibc-std-xilinx-zynqmp.tar.bz2 --numeric-owner -C /mnt/sd
	# umount /mnt/sd
	# mount /dev/mmcblk0p1 /mnt/sd
	# cp path_to_Image /mnt/sd/boot
	# cp path_to_zynqmp-zcu102-rev1.0.dtb /mnt/sd/boot
	# umount /mnt/sd

4.2.2 Set the u-boot environment variables and boot from SD card
------------------------------------------------------------

Run the following command to load the kernel image and DTB image:

	=> setenv bootargs console=ttyPS0,115200 root=/dev/mmcblk0p2 rw rootwait earlycon=cdns,mmio,0xFF000000,115200n8
	=> mmc rescan
	=> fatload mmc 0 0x10000000 Image
	=> fatload mmc 0 0x11800000 zynqmp-zcu102-rev1.0.dtb
	=> booti 0x10000000 - 0x11800000


5. Features
===========

5.1. Multilib
-------------

By default, this BSP is configured as a 64-bit kernel and 64-bit userspace.
If a full 32-bit filesystem is necessary, use the prefix "lib32-" before
the expected target image as follows:

	# bitbake lib32-wrlinux-image-glibc-std


6. WIC Notes
============

User can use the OpenEmbedded Image Creator to create the properly partitioned
image on a SD card. It generates partitioned images from existing OpenEmbedded
build artifacts. Please refer to the following URL for more detailed partition
information about WIC:

http://www.yoctoproject.org/docs/2.2/mega-manual/mega-manual.html#creating-partitioned-images

After having built your project, a partitioned WIC image will be created in the
deploy folder as follows:

  path_to_your_project/build/tmp/deploy/images/xilinx-zynqmp/wrlinux-image-glibc-<rootfs_type>-xilinx-zynqmp.wic

There are two partitions in this WIC images, the first one is to hold the boot
images, the second is the related root file system. Currently the first one is
just a hold place, the end user needs to deploy their own u-boot files properly.

6.1 An example to deploy bootloader into the first partition
------------------------------------------------------------

0) Change the first partition of the WIC image above into FAT16

   $ sudo fdisk wrlinux-image-glibc-<rootfs_type>-xilinx-zynqmp.wic

   # Type the command "t" from keyboard, then press "1" to select the first
     partition, and "6" next to select FAT16.
     Type the command "wq" to quit and save the changes.

1) Deploy the created WIC image into SD card(/dev/sdx) in your host machine.

   $ sudo dd if=wrlinux-image-glibc-<rootfs_type>-xilinx-zynqmp.wic of=/dev/sdx
   $ sudo mkfs.fat /dev/sdx1

2) Deploy the related bootloader files into /dev/sdx1

   $ sudo mount /dev/sdx1 path_to_mountpoint_sdx1
   $ cp -r path_to_your_bootloader/* path_to_mountpoint_sdx1
   $ sync; sudo umount path_to_mountpoint_sdx1

6.2 boot the board from the WIC SD card
---------------------------------------

Insert the SD card into the board and power on, then set the proper u-boot
environment parameters to boot the board, please refer to section 4 for more
information.
