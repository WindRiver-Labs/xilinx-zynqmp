From e48355655d7fafd6d6fd43115564be9e6a0ff305 Mon Sep 17 00:00:00 2001
From: Limeng <Meng.Li@windriver.com>
Date: Tue, 18 Dec 2018 15:38:12 +0800
Subject: [PATCH] gpu: mail-400: use latest timer list API interface

In kernel 4.18, there are some adjustments about timer list
API interface. Especially the timer initialization operation.
init_timer() is removed, instead it with new interface timer_setup().
Another important changing is that from_timer() is used to get the
structure instance that contains the timer list, no longer to use
pointer to pass the private data.

Therefore, modify code to use the new timer list interface
so that build successfully.

Signed-off-by: Meng Li <Meng.Li@windriver.com>
---
 .../src/devicedrv/mali/common/mali_control_timer.c | 22 ++++------
 .../driver/src/devicedrv/mali/common/mali_group.c  | 49 ++++++++++------------
 .../driver/src/devicedrv/mali/common/mali_group.h  |  2 +-
 .../driver/src/devicedrv/mali/common/mali_osk.h    | 36 ++++------------
 .../src/devicedrv/mali/common/mali_osk_types.h     |  3 +-
 .../src/devicedrv/mali/linux/mali_osk_timers.c     | 46 +++++++-------------
 6 files changed, 52 insertions(+), 106 deletions(-)

diff --git a/common/mali_control_timer.c b/common/mali_control_timer.c
index fc6ceb4..f6dabc8 100755
--- a/common/mali_control_timer.c
+++ b/common/mali_control_timer.c
@@ -18,17 +18,17 @@
 
 static u64 period_start_time = 0;
 
-static _mali_osk_timer_t *mali_control_timer = NULL;
+static struct timer_list mali_control_timer;
 static mali_bool timer_running = MALI_FALSE;
 
 static u32 mali_control_timeout = 1000;
 
 void mali_control_timer_add(u32 timeout)
 {
-	_mali_osk_timer_add(mali_control_timer, _mali_osk_time_mstoticks(timeout));
+	_mali_osk_timer_add(&mali_control_timer, _mali_osk_time_mstoticks(timeout));
 }
 
-static void mali_control_timer_callback(void *arg)
+static void mali_control_timer_callback(struct timer_list *t)
 {
 	if (mali_utilization_enabled()) {
 		struct mali_gpu_utilization_data *util_data = NULL;
@@ -65,23 +65,15 @@ _mali_osk_errcode_t mali_control_timer_init(void)
 		}
 	}
 
-	mali_control_timer = _mali_osk_timer_init();
-	if (NULL == mali_control_timer) {
-		return _MALI_OSK_ERR_FAULT;
-	}
-	_mali_osk_timer_setcallback(mali_control_timer, mali_control_timer_callback, NULL);
+	_mali_osk_timer_setcallback(&mali_control_timer, mali_control_timer_callback, NULL);
 
 	return _MALI_OSK_ERR_OK;
 }
 
 void mali_control_timer_term(void)
 {
-	if (NULL != mali_control_timer) {
-		_mali_osk_timer_del(mali_control_timer);
-		timer_running = MALI_FALSE;
-		_mali_osk_timer_term(mali_control_timer);
-		mali_control_timer = NULL;
-	}
+	_mali_osk_timer_del(&mali_control_timer);
+	timer_running = MALI_FALSE;
 }
 
 mali_bool mali_control_timer_resume(u64 time_now)
@@ -119,7 +111,7 @@ void mali_control_timer_suspend(mali_bool suspend)
 		mali_utilization_data_unlock();
 
 		if (suspend == MALI_TRUE) {
-			_mali_osk_timer_del(mali_control_timer);
+			_mali_osk_timer_del(&mali_control_timer);
 			mali_utilization_reset();
 		}
 	} else {
diff --git a/common/mali_group.c b/common/mali_group.c
index ef2a214..dbd5fbf 100755
--- a/common/mali_group.c
+++ b/common/mali_group.c
@@ -44,7 +44,7 @@ int mali_max_job_runtime = MALI_MAX_JOB_RUNTIME_DEFAULT;
 static void mali_group_bottom_half_mmu(void *data);
 static void mali_group_bottom_half_gp(void *data);
 static void mali_group_bottom_half_pp(void *data);
-static void mali_group_timeout(void *data);
+static void mali_group_timeout(struct timer_list *t);
 static void mali_group_reset_pp(struct mali_group *group);
 static void mali_group_reset_mmu(struct mali_group *group);
 
@@ -65,27 +65,23 @@ struct mali_group *mali_group_create(struct mali_l2_cache_core *core,
 
 	group = _mali_osk_calloc(1, sizeof(struct mali_group));
 	if (NULL != group) {
-		group->timeout_timer = _mali_osk_timer_init();
-		if (NULL != group->timeout_timer) {
-			_mali_osk_timer_setcallback(group->timeout_timer, mali_group_timeout, (void *)group);
+		_mali_osk_timer_setcallback(&group->timer, mali_group_timeout, (void *)group);
 
-			group->l2_cache_core[0] = core;
-			_mali_osk_list_init(&group->group_list);
-			_mali_osk_list_init(&group->executor_list);
-			_mali_osk_list_init(&group->pm_domain_list);
-			group->bcast_core = bcast;
-			group->dlbu_core = dlbu;
+		group->l2_cache_core[0] = core;
+		_mali_osk_list_init(&group->group_list);
+		_mali_osk_list_init(&group->executor_list);
+		_mali_osk_list_init(&group->pm_domain_list);
+		group->bcast_core = bcast;
+		group->dlbu_core = dlbu;
 
-			/* register this object as a part of the correct power domain */
-			if ((NULL != core) || (NULL != dlbu) || (NULL != bcast))
-				group->pm_domain = mali_pm_register_group(domain_index, group);
+		/* register this object as a part of the correct power domain */
+		if ((NULL != core) || (NULL != dlbu) || (NULL != bcast))
+			group->pm_domain = mali_pm_register_group(domain_index, group);
 
-			mali_global_groups[mali_global_num_groups] = group;
-			mali_global_num_groups++;
+		mali_global_groups[mali_global_num_groups] = group;
+		mali_global_num_groups++;
 
-			return group;
-		}
-		_mali_osk_free(group);
+		return group;
 	}
 
 	return NULL;
@@ -147,10 +143,7 @@ void mali_group_delete(struct mali_group *group)
 		}
 	}
 
-	if (NULL != group->timeout_timer) {
-		_mali_osk_timer_del(group->timeout_timer);
-		_mali_osk_timer_term(group->timeout_timer);
-	}
+	_mali_osk_timer_del(&group->timer);
 
 	if (NULL != group->bottom_half_work_mmu) {
 		_mali_osk_wq_delete_work(group->bottom_half_work_mmu);
@@ -875,7 +868,7 @@ void mali_group_start_gp_job(struct mali_group *group, struct mali_gp_job *job,
 
 	/* Setup SW timer and record start time */
 	group->start_time = _mali_osk_time_tickcount();
-	_mali_osk_timer_mod(group->timeout_timer, _mali_osk_time_mstoticks(mali_max_job_runtime));
+	_mali_osk_timer_mod(&group->timer, _mali_osk_time_mstoticks(mali_max_job_runtime));
 
 	MALI_DEBUG_PRINT(4, ("Group: Started GP job 0x%08X on group %s at %u\n",
 			     job,
@@ -1028,7 +1021,7 @@ void mali_group_start_pp_job(struct mali_group *group, struct mali_pp_job *job,
 
 	/* Setup SW timer and record start time */
 	group->start_time = _mali_osk_time_tickcount();
-	_mali_osk_timer_mod(group->timeout_timer, _mali_osk_time_mstoticks(mali_max_job_runtime));
+	_mali_osk_timer_mod(&group->timer, _mali_osk_time_mstoticks(mali_max_job_runtime));
 
 	MALI_DEBUG_PRINT(4, ("Group: Started PP job 0x%08X part %u/%u on group %s at %u\n",
 			     job, sub_job + 1,
@@ -1118,7 +1111,7 @@ struct mali_pp_job *mali_group_complete_pp(struct mali_group *group, mali_bool s
 	MALI_DEBUG_ASSERT(MALI_TRUE == group->is_working);
 
 	/* Stop/clear the timeout timer. */
-	_mali_osk_timer_del_async(group->timeout_timer);
+	_mali_osk_timer_del_async(&group->timer);
 
 	if (NULL != group->pp_running_job) {
 
@@ -1229,7 +1222,7 @@ struct mali_gp_job *mali_group_complete_gp(struct mali_group *group, mali_bool s
 	MALI_DEBUG_ASSERT(MALI_TRUE == group->is_working);
 
 	/* Stop/clear the timeout timer. */
-	_mali_osk_timer_del_async(group->timeout_timer);
+	_mali_osk_timer_del_async(&group->timer);
 
 	if (NULL != group->gp_running_job) {
 		mali_gp_update_performance_counters(group->gp_core, group->gp_running_job);
@@ -1768,9 +1761,9 @@ static void mali_group_bottom_half_pp(void *data)
 				      mali_pp_get_rawstat(group->pp_core), 0);
 }
 
-static void mali_group_timeout(void *data)
+static void mali_group_timeout(struct timer_list *t)
 {
-	struct mali_group *group = (struct mali_group *)data;
+	struct mali_group *group = from_timer(group, t, timer);
 	MALI_DEBUG_ASSERT_POINTER(group);
 
 	MALI_DEBUG_PRINT(2, ("Group: timeout handler for %s at %u\n",
diff --git a/common/mali_group.h b/common/mali_group.h
index afe966f..f3c0472 100755
--- a/common/mali_group.h
+++ b/common/mali_group.h
@@ -84,7 +84,7 @@ struct mali_group {
 	_mali_osk_wq_work_t         *bottom_half_work_gp;
 	_mali_osk_wq_work_t         *bottom_half_work_pp;
 
-	_mali_osk_timer_t           *timeout_timer;
+	struct timer_list timer;
 };
 
 /** @brief Create a new Mali group object
diff --git a/common/mali_osk.h b/common/mali_osk.h
index 5c20fc3..7eb37b4 100755
--- a/common/mali_osk.h
+++ b/common/mali_osk.h
@@ -17,6 +17,7 @@
 #define __MALI_OSK_H__
 
 #include <linux/seq_file.h>
+#include <linux/timer.h>
 #include "mali_osk_types.h"
 #include "mali_osk_specific.h"           /* include any per-os specifics */
 #include "mali_osk_locks.h"
@@ -948,15 +949,6 @@ _mali_osk_errcode_t _mali_osk_notification_queue_dequeue(_mali_osk_notification_
  *
  * @{ */
 
-/** @brief Initialize a timer
- *
- * Allocates resources for a new timer, and initializes them. This does not
- * start the timer.
- *
- * @return a pointer to the allocated timer object, or NULL on failure.
- */
-_mali_osk_timer_t *_mali_osk_timer_init(void);
-
 /** @brief Start a timer
  *
  * It is an error to start a timer without setting the callback via
@@ -972,7 +964,7 @@ _mali_osk_timer_t *_mali_osk_timer_init(void);
  * @param ticks_to_expire the amount of time in ticks for the timer to run
  * before triggering.
  */
-void _mali_osk_timer_add(_mali_osk_timer_t *tim, unsigned long ticks_to_expire);
+void _mali_osk_timer_add(struct timer_list *tim, unsigned long ticks_to_expire);
 
 /** @brief Modify a timer
  *
@@ -991,7 +983,7 @@ void _mali_osk_timer_add(_mali_osk_timer_t *tim, unsigned long ticks_to_expire);
  * should trigger.
  *
  */
-void _mali_osk_timer_mod(_mali_osk_timer_t *tim, unsigned long ticks_to_expire);
+void _mali_osk_timer_mod(struct timer_list *tim, unsigned long ticks_to_expire);
 
 /** @brief Stop a timer, and block on its completion.
  *
@@ -1012,7 +1004,7 @@ void _mali_osk_timer_mod(_mali_osk_timer_t *tim, unsigned long ticks_to_expire);
  * @param tim the timer to stop.
  *
  */
-void _mali_osk_timer_del(_mali_osk_timer_t *tim);
+void _mali_osk_timer_del(struct timer_list *tim);
 
 /** @brief Stop a timer.
  *
@@ -1023,7 +1015,7 @@ void _mali_osk_timer_del(_mali_osk_timer_t *tim);
  *
  * @param tim the timer to stop.
  */
-void _mali_osk_timer_del_async(_mali_osk_timer_t *tim);
+void _mali_osk_timer_del_async(struct timer_list *tim);
 
 /** @brief Check if timer is pending.
  *
@@ -1032,7 +1024,7 @@ void _mali_osk_timer_del_async(_mali_osk_timer_t *tim);
  * @param tim the timer to check
  * @return MALI_TRUE if time is active, MALI_FALSE if it is not active
  */
-mali_bool _mali_osk_timer_pending(_mali_osk_timer_t *tim);
+mali_bool _mali_osk_timer_pending(struct timer_list *tim);
 
 /** @brief Set a timer's callback parameters.
  *
@@ -1046,21 +1038,7 @@ mali_bool _mali_osk_timer_pending(_mali_osk_timer_t *tim);
  * @param callback Function to call when timer expires
  * @param data Function-specific data to supply to the function on expiry.
  */
-void _mali_osk_timer_setcallback(_mali_osk_timer_t *tim, _mali_osk_timer_callback_t callback, void *data);
-
-/** @brief Terminate a timer, and deallocate resources.
- *
- * The timer must first be stopped by calling _mali_osk_timer_del().
- *
- * It is a programming error for _mali_osk_timer_term() to be called on:
- * - timer that is currently running
- * - a timer that is currently executing its callback.
- *
- * @param tim the timer to deallocate.
- */
-void _mali_osk_timer_term(_mali_osk_timer_t *tim);
-/** @} */ /* end group _mali_osk_timer */
-
+void _mali_osk_timer_setcallback(struct timer_list *tim, _mali_osk_timer_callback_t callback, void *data);
 
 /** @defgroup _mali_osk_time OSK Time functions
  *
diff --git a/common/mali_osk_types.h b/common/mali_osk_types.h
index 6e9a133..0aec573 100755
--- a/common/mali_osk_types.h
+++ b/common/mali_osk_types.h
@@ -49,6 +49,7 @@ typedef unsigned long long u64;
 /* Ensure Linux types u32, etc. are defined */
 #include <linux/types.h>
 #endif
+#include <linux/timer.h>
 
 /** @brief Mali Boolean type which uses MALI_TRUE and MALI_FALSE
   */
@@ -395,7 +396,7 @@ typedef struct _mali_osk_notification_t_struct {
  * by any callers of _mali_osk_timer_del(). Otherwise, a deadlock may occur.
  *
  * @param arg Function-specific data */
-typedef void (*_mali_osk_timer_callback_t)(void *arg);
+typedef void (*_mali_osk_timer_callback_t)(struct timer_list *arg);
 
 /** @brief Private type for Timer Callback Objects */
 typedef struct _mali_osk_timer_t_struct _mali_osk_timer_t;
diff --git a/linux/mali_osk_timers.c b/linux/mali_osk_timers.c
index 8ada2da..b3946e6 100755
--- a/linux/mali_osk_timers.c
+++ b/linux/mali_osk_timers.c
@@ -18,59 +18,41 @@
 #include "mali_osk.h"
 #include "mali_kernel_common.h"
 
-struct _mali_osk_timer_t_struct {
-	struct timer_list timer;
-};
+typedef void (*timer_timeout_function_t)(struct timer_list *);
 
-typedef void (*timer_timeout_function_t)(unsigned long);
-
-_mali_osk_timer_t *_mali_osk_timer_init(void)
-{
-	_mali_osk_timer_t *t = (_mali_osk_timer_t *)kmalloc(sizeof(_mali_osk_timer_t), GFP_KERNEL);
-	if (NULL != t) init_timer(&t->timer);
-	return t;
-}
-
-void _mali_osk_timer_add(_mali_osk_timer_t *tim, unsigned long ticks_to_expire)
-{
-	MALI_DEBUG_ASSERT_POINTER(tim);
-	tim->timer.expires = jiffies + ticks_to_expire;
-	add_timer(&(tim->timer));
-}
-
-void _mali_osk_timer_mod(_mali_osk_timer_t *tim, unsigned long ticks_to_expire)
+void _mali_osk_timer_add(struct timer_list *tim, unsigned long ticks_to_expire)
 {
 	MALI_DEBUG_ASSERT_POINTER(tim);
-	mod_timer(&(tim->timer), jiffies + ticks_to_expire);
+	tim->expires = jiffies + ticks_to_expire;
+	add_timer(tim);
 }
 
-void _mali_osk_timer_del(_mali_osk_timer_t *tim)
+void _mali_osk_timer_mod(struct timer_list *tim, unsigned long ticks_to_expire)
 {
 	MALI_DEBUG_ASSERT_POINTER(tim);
-	del_timer_sync(&(tim->timer));
+	mod_timer(tim, jiffies + ticks_to_expire);
 }
 
-void _mali_osk_timer_del_async(_mali_osk_timer_t *tim)
+void _mali_osk_timer_del(struct timer_list *tim)
 {
 	MALI_DEBUG_ASSERT_POINTER(tim);
-	del_timer(&(tim->timer));
+	del_timer_sync(tim);
 }
 
-mali_bool _mali_osk_timer_pending(_mali_osk_timer_t *tim)
+void _mali_osk_timer_del_async(struct timer_list *tim)
 {
 	MALI_DEBUG_ASSERT_POINTER(tim);
-	return 1 == timer_pending(&(tim->timer));
+	del_timer(tim);
 }
 
-void _mali_osk_timer_setcallback(_mali_osk_timer_t *tim, _mali_osk_timer_callback_t callback, void *data)
+mali_bool _mali_osk_timer_pending(struct timer_list *tim)
 {
 	MALI_DEBUG_ASSERT_POINTER(tim);
-	tim->timer.data = (unsigned long)data;
-	tim->timer.function = (timer_timeout_function_t)callback;
+	return 1 == timer_pending(tim);
 }
 
-void _mali_osk_timer_term(_mali_osk_timer_t *tim)
+void _mali_osk_timer_setcallback(struct timer_list *tim, _mali_osk_timer_callback_t callback, void *data)
 {
 	MALI_DEBUG_ASSERT_POINTER(tim);
-	kfree(tim);
+	timer_setup(tim, callback, 0);
 }
-- 
2.7.4

